[{"/Users/bradl/Desktop/Berkeley/Fall_2022/PlexTech/Frontend/src/index.js":"1","/Users/bradl/Desktop/Berkeley/Fall_2022/PlexTech/Frontend/src/app.js":"2","/Users/bradl/Desktop/Berkeley/Fall_2022/PlexTech/Frontend/src/completePage.js":"3","/Users/bradl/Desktop/Berkeley/Fall_2022/PlexTech/Frontend/src/adminLogin.js":"4","/Users/bradl/Desktop/Berkeley/Fall_2022/PlexTech/Frontend/src/home.js":"5","/Users/bradl/Desktop/Berkeley/Fall_2022/PlexTech/Frontend/src/adminConsole.js":"6","/Users/bradl/Desktop/Berkeley/Fall_2022/PlexTech/Frontend/src/applicationForm.js":"7","/Users/bradl/Desktop/Berkeley/Fall_2022/PlexTech/Frontend/src/memberLogin.js":"8","/Users/bradl/Desktop/Berkeley/Fall_2022/PlexTech/Frontend/src/successPage.js":"9","/Users/bradl/Desktop/Berkeley/Fall_2022/PlexTech/Frontend/src/graderForm.js":"10","/Users/bradl/Desktop/Berkeley/Fall_2022/PlexTech/Frontend/src/privacyPolicy.js":"11","/Users/bradl/Desktop/Berkeley/Fall_2022/PlexTech/Frontend/src/funnyDog.js":"12"},{"size":335,"mtime":1672382999418,"results":"13","hashOfConfig":"14"},{"size":1287,"mtime":1690596703654,"results":"15","hashOfConfig":"14"},{"size":1190,"mtime":1672776155489,"results":"16","hashOfConfig":"14"},{"size":2706,"mtime":1690599765261,"results":"17","hashOfConfig":"14"},{"size":3307,"mtime":1691286714023,"results":"18","hashOfConfig":"14"},{"size":20960,"mtime":1692757595160,"results":"19","hashOfConfig":"14"},{"size":24154,"mtime":1693446405207,"results":"20","hashOfConfig":"14"},{"size":2711,"mtime":1690602860177,"results":"21","hashOfConfig":"14"},{"size":2008,"mtime":1674204580605,"results":"22","hashOfConfig":"14"},{"size":24393,"mtime":1692926638179,"results":"23","hashOfConfig":"14"},{"size":1465,"mtime":1672430914388,"results":"24","hashOfConfig":"14"},{"size":308,"mtime":1675238657199,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"30"},"i18afx",{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"30"},{"filePath":"41","messages":"42","suppressedMessages":"43","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"30"},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"30"},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"30"},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"30"},{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"30"},"/Users/bradl/Desktop/Berkeley/Fall_2022/PlexTech/Frontend/src/index.js",["70"],[],"import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './app';\nimport { BrowserRouter } from \"react-router-dom\";\nimport { GoogleOAuthProvider } from '@react-oauth/google';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\n\nroot.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>\n);",[],"/Users/bradl/Desktop/Berkeley/Fall_2022/PlexTech/Frontend/src/app.js",[],[],"/Users/bradl/Desktop/Berkeley/Fall_2022/PlexTech/Frontend/src/completePage.js",[],[],"/Users/bradl/Desktop/Berkeley/Fall_2022/PlexTech/Frontend/src/adminLogin.js",["71"],[],"import React from \"react\";\nimport { useEffect, useState } from 'react';\nimport \"./styles.css\";\nimport Button from \"@mui/material/Button\";\nimport { useNavigate } from \"react-router-dom\";\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\nimport jwt_decode from \"jwt-decode\";\n\nconst theme = createTheme({\n    status: {\n        danger: '#e53e3e',\n    },\n    palette: {\n        primary: {\n            main: '#ff8a00',\n        },\n        neutral: {\n            main: '#ffffff',\n            contrastText: '#ff8a00',\n        },\n    },\n});\n\nfunction AdminLoginPage() {\n    const navigate = useNavigate();\n    const clientID = process.env.REACT_APP_GOOGLE_CLIENT;\n    const [loginMessage, setMessage] = useState(\"\");\n\n    async function handleResponse(response) {\n        var userObject = jwt_decode(response.credential);\n        const email = userObject.email;\n        await fetch(`${process.env.REACT_APP_API_URL}/check_admin`, {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n                email: email,\n            })\n        })\n            .then((response) => {\n                return (response.json());\n            })\n            .then((data) => {\n\n                if (data.found === true) {\n                    navigate('/admin', { replace: true, state: { email: email } })\n                }\n                else {\n                    setMessage(\"Login Failed. Please contact the PlexTech executive team if the issue persists.\");\n                }\n            });\n    }\n\n    useEffect(() => {\n        /* global google */\n        google.accounts.id.initialize({\n            client_id: clientID,\n            callback: handleResponse,\n        });\n\n        google.accounts.id.renderButton(\n            document.getElementById('signInDiv'),\n            { theme: \"outline\", size: \"large\" },\n        )\n    }, []);\n\n    return (\n        <>\n            <ThemeProvider theme={theme}>\n                <div className='form-field'>\n                    <div>\n                        <h2>This is an admin-only page.</h2>\n                        <h4>Please log in first to continue.</h4>\n                    </div>\n                    <div id=\"signInDiv\"></div>\n                    <Button style={{ \"display\": \"flex\" }}\n                        variant=\"contained\"\n                        color=\"neutral\"\n                        onClick={() => { navigate('/') }}\n                        className=\"navHome\">Return Home</Button>\n                    <div>\n                        <p>{loginMessage}</p>\n                    </div>\n                </div>\n            </ThemeProvider>\n        </>\n    )\n}\n\nexport default AdminLoginPage;","/Users/bradl/Desktop/Berkeley/Fall_2022/PlexTech/Frontend/src/home.js",[],[],"/Users/bradl/Desktop/Berkeley/Fall_2022/PlexTech/Frontend/src/adminConsole.js",["72","73"],[],"import React, { useState, useEffect } from \"react\";\nimport { Formik } from \"formik\";\nimport \"./styles.css\";\nimport Button from \"@mui/material/Button\";\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\nimport { useNavigate, useLocation } from \"react-router-dom\";\nimport { ExportToCsv } from 'export-to-csv';\n\nfunction AdminConsole() {\n\n    const URL = process.env.REACT_APP_API_URL;\n    const { state } = useLocation();\n    const navigate = useNavigate();\n    const [graderMessage, setGraderMessage] = useState(\"\");\n    const [CSVMessage, setCSVMessage] = useState(\"\");\n    const [CSVMessage2, setCSVMessage2] = useState(\"\");\n    const [CSVMessage3, setCSVMessage3] = useState(\"\");\n    const [graders, setGraders] = useState([]);\n    const [action1, setAction1] = useState('add');\n    const [results, setResults] = useState([]);\n    const [applications, setApplications] = useState([]);\n    const [evaluations, setEvaluations] = useState([]);\n    const [incomplete, setIncomplete] = useState([]);\n    const [assignmentsCleared, setAssignmentsCleared] = useState([]);\n\n\n    const theme = createTheme({\n        status: {\n            danger: \"#e53e3e\",\n        },\n        palette: {\n            primary: {\n                main: \"#ff8a00\",\n            },\n            neutral: {\n                main: \"#ffffff\",\n                contrastText: \"#ff8a00\",\n            },\n        },\n    });\n\n\n    async function fetchGraderData() {\n        await fetch(`${URL}/get_graders`, {\n            method: 'GET',\n        })\n            .then((response) => {\n                return (response.json());\n            })\n            .then((data) => {\n                const graders = [];\n                for (let [key, value] of Object.entries(data)) {\n                    graders.push([key, value.email]);\n                }\n                setGraders(graders);\n            })\n            .catch((err) => {\n                console.log(err.message);\n            });\n    }\n\n    //Refresh boot-up procedures\n    useEffect(() => {\n        async function checkUser(value) {\n            await fetch(`${URL}/check_admin`, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Access-Control-Allow-Origin': '*',\n                },\n                body: JSON.stringify({\n                    email: value.email,\n                })\n            })\n                .then((response) => {\n                    return (response.json());\n                })\n                .then((data) => {\n                    if (data.found === false) {\n                        navigate('/admin-login');\n                    }\n                });\n        };\n\n        if (state === null) {\n            navigate('/admin-login');\n        } else {\n            checkUser(state);\n        }\n\n        fetchGraderData();\n        loadAnalytics();\n        getResults();\n        getApplications();\n        getEvaluations();\n        getIncomplete();\n        setAssignmentsCleared(false)\n    }, []);\n\n    useEffect(() => {\n        fetchGraderData();\n    }, [graderMessage]);\n\n    const [analyticData, setAnalyticData] = useState({\n        count: \"N/A\",\n        freshman: \"N/A\",\n        sophomore: \"N/A\",\n        junior: \"N/A\",\n        senior: \"N/A\",\n        male: \"N/A\",\n        female: \"N/A\",\n        other: \"N/A\",\n    })\n\n    async function loadAnalytics() {\n        await fetch(`${URL}/analytics`, {\n            method: 'GET',\n        })\n            .then((response) => {\n                return (response.json());\n            })\n            .then((data) => {\n                setAnalyticData(data);\n            })\n            .catch((err) => {\n                console.log(err.message);\n            });\n    }\n\n    function Analytics() {\n\n        return (\n            <>\n                <ul>\n                    <li>Total Application Count: {analyticData.count}</li>\n                    <br />\n                    <li>Grade</li>\n                    <br />\n                    <li>Freshmen: {analyticData.freshman} ({((analyticData.freshman / analyticData.count) * 100).toFixed(2)}%)</li>\n                    <li>Sophomore: {analyticData.sophomore} ({((analyticData.sophomore / analyticData.count) * 100).toFixed(2)}%)</li>\n                    <li>Junior: {analyticData.junior} ({((analyticData.junior / analyticData.count) * 100).toFixed(2)}%)</li>\n                    <li>Senior: {analyticData.senior} ({((analyticData.senior / analyticData.count) * 100).toFixed(2)}%)</li>\n                    <br />\n                    <li>Gender</li>\n                    <br />\n                    <li>Male: {analyticData.male} ({((analyticData.male / analyticData.count) * 100).toFixed(2)}%)</li>\n                    <li>Female: {analyticData.female} ({((analyticData.female / analyticData.count) * 100).toFixed(2)}%)</li>\n                    <li>Other Genders: {analyticData.other} ({((analyticData.other / analyticData.count) * 100).toFixed(2)}%)</li>\n                    <br />\n                    <li>Ethnicity</li>\n                    <br />\n                    <li>American Indian: {analyticData.American_Indian} ({((analyticData.American_Indian / analyticData.count) * 100).toFixed(2)}%)</li>\n                    <li>Asian: {analyticData.Asian} ({((analyticData.Asian / analyticData.count) * 100).toFixed(2)}%)</li>\n                    <li>Black: {analyticData.Black} ({((analyticData.Black / analyticData.count) * 100).toFixed(2)}%)</li>\n                    <li>White: {analyticData.White} ({((analyticData.White / analyticData.count) * 100).toFixed(2)}%)</li>\n                    <li>Middle Eastern: {analyticData.Middle_Eastern} ({((analyticData.Middle_Eastern / analyticData.count) * 100).toFixed(2)}%)</li>\n                    <li>Pacific Islander: {analyticData.Pacific_Islander} ({((analyticData.Pacific_Islander / analyticData.count) * 100).toFixed(2)}%)</li>\n                </ul>\n                <Button\n                    style={{ display: \"flex\" }}\n                    variant=\"contained\"\n                    color=\"neutral\"\n                    onClick={loadAnalytics}\n                    className=\"loadAnalytics\"\n                >Refresh Analytics</Button>\n            </>\n        )\n    }\n\n    const [assignments, setAssignments] = useState({})\n\n    async function assignGraders() {\n        await fetch(`${URL}/assign_graders`, {\n            method: 'GET',\n        })\n            .then((response) => {\n                return (response.json());\n            })\n            .then((data) => {\n                setAssignments(data);\n                console.log(`Successfully retrieved ${Object.keys(data).length} assignments.`)\n            })\n            .catch((err) => {\n                console.log(err.message);\n            });\n    }\n\n    async function clearAssignments() {\n        await fetch(`${URL}/clear_assignments`, {\n            method: 'DELETE',\n        })\n            .then(() => {\n                setAssignmentsCleared(true);\n            });\n    }\n\n    function Assignment() {\n\n        return (\n            <>\n                <Button\n                    style={{ display: \"flex\" }}\n                    variant=\"contained\"\n                    color=\"neutral\"\n                    onClick={assignGraders}\n                    className=\"assignGraders\"\n                >Assign Graders / View Assignments</Button>\n                <br />\n                <Button\n                    style={{ display: \"flex\" }}\n                    variant=\"contained\"\n                    color=\"neutral\"\n                    onClick={clearAssignments}\n                    className=\"clearAssignments\"\n                >Clear All Assignments</Button>\n                {assignmentsCleared ? <p>Cleared all assignments</p> : <></>}\n                <h4>Current Assignments</h4>\n                <div>\n                    {Object.keys(assignments).map(key => {\n                        return (\n                            <div>\n                                <h6>{key}</h6>\n                                <ul>\n                                    {assignments[key].map(value => (\n                                        <li key={value}>{value}</li>\n                                    ))}\n                                </ul>\n                            </div>\n                        );\n                    })}\n                </div>\n            </>\n        );\n    }\n\n    async function getResults() {\n        await fetch(`${URL}/export_results`, {\n            method: 'GET',\n        })\n            .then((response) => {\n                return (response.json());\n            })\n            .then((data) => {\n                if (data.length === 0) {\n                    setCSVMessage(\"There are currently no reviews.\");\n                } else {\n                    setResults(data);\n                }\n            })\n            .catch((err) => {\n                console.log(err.message);\n            });\n    }\n\n    function exportResults() {\n        const options = {\n            fieldSeparator: ',',\n            quoteStrings: '\"',\n            decimalSeparator: '.',\n            showLabels: true,\n            showTitle: true,\n            title: 'Grading Results',\n            useTextFile: false,\n            useBom: true,\n        };\n        const csvExport = new ExportToCsv(options);\n        csvExport.generateCsv(results);\n    }\n\n    function Results() {\n        return (\n            <>\n                <Button\n                    style={{ display: \"flex\" }}\n                    variant=\"contained\"\n                    color=\"neutral\"\n                    onClick={exportResults}\n                    className=\"exportResults\"\n                    download\n                >Export Results as CSV File</Button>\n                <p>{CSVMessage}</p>\n            </>\n        )\n    }\n\n    async function getApplications() {\n        await fetch(`${URL}/export_applications`, {\n            method: 'GET',\n        })\n            .then((response) => {\n                return (response.json());\n            })\n            .then((data) => {\n                if (data.length === 0) {\n                    setCSVMessage2(\"There are currently no applications.\");\n                } else {\n                    setApplications(data)\n                }\n            })\n            .catch((err) => {\n                console.log(err.message);\n            });\n    }\n\n    function exportApplications() {\n        const options = {\n            fieldSeparator: ',',\n            quoteStrings: '\"',\n            decimalSeparator: '.',\n            showLabels: true,\n            showTitle: true,\n            title: 'Applications',\n            useTextFile: false,\n            useBom: true,\n        };\n        const csvExport = new ExportToCsv(options);\n        csvExport.generateCsv(applications);\n    }\n\n    function Applications() {\n        return (\n            <>\n                <Button\n                    style={{ display: \"flex\" }}\n                    variant=\"contained\"\n                    color=\"neutral\"\n                    onClick={exportApplications}\n                    className=\"exportApplications\"\n                    download\n                >Export Applications as CSV File</Button>\n                <p>{CSVMessage2}</p>\n            </>\n        )\n    }\n\n    async function getEvaluations() {\n        await fetch(`${URL}/evaluate_results`, {\n            method: 'GET',\n            headers: {\n                'Access-Control-Allow-Origin': '*',\n            },\n        })\n            .then((response) => {\n                return (response.json());\n            })\n            .then((data) => {\n                if (data.length === 0) {\n                    setCSVMessage3(\"There are currently no reviews.\");\n                } else {\n                    setEvaluations(data)\n                }\n            })\n            .catch((err) => {\n                console.log(err.message);\n            });\n    }\n\n    function exportEvaluations() {\n        const options = {\n            fieldSeparator: ',',\n            quoteStrings: '\"',\n            decimalSeparator: '.',\n            showLabels: true,\n            showTitle: true,\n            title: 'Evaluations',\n            useTextFile: false,\n            useBom: true,\n        };\n        const csvExport = new ExportToCsv(options);\n        csvExport.generateCsv(evaluations);\n    }\n\n    function Evaluations() {\n        return (\n            <>\n                <Button\n                    style={{ display: \"flex\" }}\n                    variant=\"contained\"\n                    color=\"neutral\"\n                    onClick={exportEvaluations}\n                    className=\"exportEvaluations\"\n                    download\n                >Export Evaluations as CSV File</Button>\n                <p>{CSVMessage3}</p>\n            </>\n        )\n    }\n\n    const [adminKey, setAdminKey] = useState('');\n    const [flushMessage, setFlushMessage] = useState('');\n    async function flushDatabase() {\n        if (adminKey === 'plextechpermission') {\n            await fetch(`${URL}/flush_database`, {\n                method: 'GET',\n            })\n                .then(() => {\n                    setFlushMessage('Database successfully cleared.');\n                })\n                .catch((err) => {\n                    console.log(err.message);\n                });\n        } else {\n            setFlushMessage('Incorrect admin key.')\n        }\n    }\n\n    async function getIncomplete() {\n        await fetch(`${URL}/check_progress`, {\n            method: 'GET',\n        })\n            .then((response) => {\n                return response.json();\n            })\n            .then((data) => {\n                console.log(data);\n                setIncomplete(data);\n            })\n            .catch((err) => {\n                console.log(err.message);\n            });\n    }\n\n    return (\n        <>\n            <ThemeProvider theme={theme}>\n                <div className='form-field'>\n                    <span>\n                        <Button\n                            style={{ display: \"flex\" }}\n                            variant=\"contained\"\n                            color=\"neutral\"\n                            onClick={() => { navigate('/') }}\n                            className=\"navHome\"\n                        >Return Home</Button>\n\n                        <h1 style={{ display: \"flex\" }}>\n                            PlexTech Administrator Console\n                        </h1>\n                    </span>\n\n                    {/* Grader Control */}\n                    <Formik\n                        initialValues={{\n                            email: \"\",\n                        }}\n                        onSubmit={async (values) => {\n                            if (action1 === \"add\") {\n                                await fetch(`${URL}/add_grader`, {\n                                    method: 'POST',\n                                    headers: { 'Content-Type': 'application/json' },\n                                    body: JSON.stringify({\n                                        email: values.email,\n                                    })\n                                }).then(() => {\n                                    setGraderMessage(\"Successfully added grader \" + values.email + \".\")\n                                });\n                            } else if (action1 === \"remove\") {\n                                await fetch(`${URL}/remove_grader`, {\n                                    method: 'POST',\n                                    headers: { 'Content-Type': 'application/json' },\n                                    body: JSON.stringify({\n                                        email: values.email,\n                                    })\n                                }).then(() => {\n                                    setGraderMessage(\"Successfully removed grader \" + values.email + \".\")\n                                });\n                            }\n                        }}\n                    >\n                        {formik => (\n                            <div className='admin-console'>\n                                <div>\n                                    <h2>Grader Control</h2>\n                                    <h4>Current Graders:</h4>\n                                    <ul>\n                                        {\n                                            graders.map(grader => {\n                                                return (\n                                                    <li key={grader[0]}>{grader[1]}</li>\n                                                )\n                                            })\n                                        }\n                                    </ul>\n                                    <p>{graderMessage}</p>\n\n                                    <form onSubmit={formik.handleSubmit}>\n                                        <label htmlFor=\"lastName\">Grader Email</label>\n                                        <input\n                                            id=\"email\"\n                                            type=\"text\"\n                                            {...formik.getFieldProps('email')} />\n\n                                        <label htmlFor=\"rating1\">\n                                            What do you want to do with this grader?\n                                        </label>\n                                        <select className=\"dropbtn\" name=\"action1\" value={action1} onChange={(event) => { setAction1(event.target.value) }}>\n                                            <option value=\"\" disabled={true}>Select an action:</option>\n                                            <option value=\"add\">add grader</option>\n                                            <option value=\"remove\">remove grader</option>\n                                        </select>\n                                        <div style={{ marginTop: '2rem' }}>\n                                            <Button type=\"submit\"\n                                                variant=\"contained\"\n                                                color=\"neutral\"\n                                                fontWeight=\"Bold\"\n                                                style={{ \"marginBottom\": \"50px\" }}\n                                            >Submit</Button>\n                                        </div>\n                                    </form>\n                                </div>\n                            </div>\n                        )}\n                    </Formik>\n\n                    <div className='horizontal-box'>\n                        <h2>Application Analytics</h2>\n                        <Analytics />\n                    </div>\n\n                    <div className='horizontal-box'>\n                        <h2>Grader Assignment Control</h2>\n                        <p>Note: Please ensure that all graders are finalized before performing this action.</p>\n                        <Assignment />\n                    </div>\n\n                    <div className='horizontal-box'>\n                        <h2>Grading Results</h2>\n                        <Results />\n                    </div>\n\n                    <div className='horizontal-box'>\n                        <h2>Applications</h2>\n                        <Applications />\n                    </div>\n\n                    <div className='horizontal-box'>\n                        <h2>Normalized Evaluations</h2>\n                        <Evaluations />\n                    </div>\n\n                    <div className='horizontal-box'>\n                        <h2>Progress Check</h2>\n                        <p>Any grader who has not completed their assignments will be listed here.</p>\n                        {incomplete.map(\n                            (message) => (message.map((word) => <p>{word + \" \"}</p>))\n                        )}\n                    </div>\n\n                    <div className=\"horizontal-box\">\n                        <h2>DANGER: Database Operations</h2>\n                        <label>Enter admin key to proceed:</label>\n                        <input\n                            type='text'\n                            value={adminKey}\n                            onChange={(e) => setAdminKey(e.target.value)}\n                            style={{ marginBottom: \"2rem\" }}\n                        ></input>\n                        <Button\n                            style={{ display: \"flex\" }}\n                            variant=\"contained\"\n                            color=\"neutral\"\n                            onClick={flushDatabase}\n                            className=\"flushDatabase\"\n                        >Flush Database</Button>\n                        <p>{flushMessage}</p>\n                    </div>\n                </div>\n                <br />\n            </ThemeProvider>\n        </>\n    )\n}\n\nexport default AdminConsole;\n\n// Post Op Interface Test 2","/Users/bradl/Desktop/Berkeley/Fall_2022/PlexTech/Frontend/src/applicationForm.js",["74","75","76","77","78"],[],"/Users/bradl/Desktop/Berkeley/Fall_2022/PlexTech/Frontend/src/memberLogin.js",["79"],[],"import React from \"react\";\nimport { useEffect, useState } from 'react';\nimport \"./styles.css\";\nimport Button from \"@mui/material/Button\";\nimport { useNavigate } from \"react-router-dom\";\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\nimport jwt_decode from \"jwt-decode\";\n\nconst theme = createTheme({\n    status: {\n        danger: '#e53e3e',\n    },\n    palette: {\n        primary: {\n            main: '#ff8a00',\n        },\n        neutral: {\n            main: '#ffffff',\n            contrastText: '#ff8a00',\n        },\n    },\n});\n\nfunction MemberLoginPage() {\n    const navigate = useNavigate();\n    const clientID = process.env.REACT_APP_GOOGLE_CLIENT;\n    const [loginMessage, setMessage] = useState(\"\");\n\n    async function handleResponse(response) {\n        var userObject = jwt_decode(response.credential);\n        const email = userObject.email;\n        await fetch(`${process.env.REACT_APP_API_URL}/check_grader`, {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n                email: email,\n            })\n        })\n            .then((response) => {\n                return (response.json());\n            })\n            .then((data) => {\n\n                if (data.found === true) {\n                    navigate('/grading', { replace: true, state: { email: email } })\n                }\n                else {\n                    setMessage(\"Login Failed. Please contact the PlexTech executive team if the issue persists.\");\n                }\n            });\n    }\n\n    useEffect(() => {\n        /* global google */\n        google.accounts.id.initialize({\n            client_id: clientID,\n            callback: handleResponse,\n        });\n\n        google.accounts.id.renderButton(\n            document.getElementById('signInDiv'),\n            { theme: \"outline\", size: \"large\" },\n        )\n    }, []);\n\n    return (\n        <>\n            <ThemeProvider theme={theme}>\n                <div className='form-field'>\n                    <div>\n                        <h2>This is a member-only page.</h2>\n                        <h4>Please log in first to continue.</h4>\n                    </div>\n                    <div id=\"signInDiv\"></div>\n                    <Button style={{ \"display\": \"flex\" }}\n                        variant=\"contained\"\n                        color=\"neutral\"\n                        onClick={() => { navigate('/') }}\n                        className=\"navHome\">Return Home</Button>\n                    <div>\n                        <p>{loginMessage}</p>\n                    </div>\n                </div>\n            </ThemeProvider>\n        </>\n    )\n}\n\nexport default MemberLoginPage;","/Users/bradl/Desktop/Berkeley/Fall_2022/PlexTech/Frontend/src/successPage.js",["80"],[],"import React from \"react\";\nimport \"./styles.css\";\nimport Button from \"@mui/material/Button\";\nimport { useEffect, useState } from 'react';\nimport { useNavigate, useLocation } from \"react-router-dom\";\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\n\nconst theme = createTheme({\n    status: {\n        danger: '#e53e3e',\n    },\n    palette: {\n        primary: {\n            main: '#ff8a00',\n        },\n        neutral: {\n            main: '#ffffff',\n            contrastText: '#ff8a00',\n        },\n    },\n});\n\nfunction SuccessPage() {\n\n    const navigate = useNavigate();\n    const { state } = useLocation();\n    const [UID, setUID] = useState('');\n\n    useEffect(() => {\n        if (state === null) {\n            navigate('/apply');\n        } else {\n            if (state.UID === null) {\n                navigate('/apply');\n            } else {\n                setUID(state.UID);\n            }\n        }\n    }, [])\n\n    return (\n        <>\n            <ThemeProvider theme={theme}>\n                <div className='form-field'>\n                    <div>\n                        <h2>Thank you for applying to PlexTech!</h2>\n                        <h4>We will reach out to you very soon.</h4>\n                        <br />\n                        <h3 style={{ 'color': \"black\" }}>Your Applicant ID:</h3>\n                        <h4 style={{ 'color': \"#ff8a00\" }}>{UID}</h4>\n                        <h6>Please keep this ID in a safe place; you will not be able to access it later. <br/> Should you need to contact us regarding your application, please refer to this ID.</h6>\n                    </div>\n                    <br/>\n                    <Button style={{ \"display\": \"flex\" }}\n                        variant=\"contained\"\n                        color=\"neutral\"\n                        onClick={() => { navigate('/') }}\n                        className=\"navHome\">Return Home</Button>\n                </div>\n            </ThemeProvider>\n\n        </>\n    )\n}\n\nexport default SuccessPage;","/Users/bradl/Desktop/Berkeley/Fall_2022/PlexTech/Frontend/src/graderForm.js",["81","82","83"],[],"import React, { useState, useEffect, useRef } from \"react\";\nimport { Formik } from \"formik\";\nimport * as Yup from \"yup\";\nimport \"./styles.css\";\nimport Button from \"@mui/material/Button\";\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\nimport { useNavigate, useLocation } from \"react-router-dom\";\nimport LinearProgress from '@mui/material/LinearProgress';\n\nconst theme = createTheme({\n  status: {\n    danger: \"#e53e3e\",\n  },\n  palette: {\n    primary: {\n      main: \"#ff8a00\",\n    },\n    neutral: {\n      main: \"#ffffff\",\n      contrastText: \"#ff8a00\",\n    },\n  },\n});\n\nconst GraderForm = () => {\n  const navigate = useNavigate();\n  const [userInfo, setData] = useState([{\n    timestamp: \"Loading applicants, please stand by...\",\n    firstName: \"\",\n    lastName: \"\",\n    resume: \"\",\n    role: \"\",\n    answer1: \"\",\n    answer2: \"\",\n    commitments: \"\",\n    year: \"\",\n    major: \"\",\n    gender: \"\",\n    linkedin: \"N/A\",\n    website: \"N/A\",\n    race: \"\",\n  }]);\n\n  const [resCommit, setResCommit] = useState(\"1\");\n  const [resLead, setResLead] = useState(\"1\");\n  const [resTech, setResTech] = useState(\"1\");\n\n  const [initiative, setInitiative] = useState(\"1\");\n  const [problem, setProblem] = useState(\"1\");\n  const [ansCommit, setAnsCommit] = useState(\"1\");\n  const [impact, setImpact] = useState(\"1\");\n  const [passion, setPassion] = useState(\"1\");\n  const [excellence, setExcellence] = useState(\"1\");\n  const [commitment, setcommitment] = useState(\"1\");\n\n  const [comment0, setComment0] = useState('');\n  const [comment1, setComment1] = useState('');\n  const [comment2, setComment2] = useState('');\n  const [comment3, setComment3] = useState('');\n  const [comment4, setComment4] = useState('');\n  const [loadingMessage, setLoading] = useState('');\n  const [essaySubmitted, setEssaySubmitted] = useState(false);\n  const resumeRef = useRef(null);\n  const [completed, setCompleted] = useState(0);\n  const [total, setTotal] = useState(0);\n\n  const navToHome = () => {\n    navigate(\"/\");\n  };\n\n  useEffect(\n    () => {\n      if (essaySubmitted) {\n        resumeRef.current?.scrollIntoView({ behavior: 'smooth' });\n      }\n    }, [essaySubmitted]\n  );\n\n  useEffect(\n    () => {\n      setLoading(\"\");\n    }, [completed]\n  )\n\n  const { state } = useLocation();\n\n  //Load Applicant Data\n  async function fetchData() {\n    let url = `${process.env.REACT_APP_API_URL}/get_applicant/` + state.email\n    await fetch(url, {\n      method: 'GET',\n    })\n      .then((response) => {\n        return (response.json());\n      })\n      .then((data) => {\n\n        function base64ToArrayBuffer(data) {\n          var binaryString = window.atob(data);\n          var binaryLen = binaryString.length;\n          var byteArray = new Uint8Array(binaryLen);\n          for (var i = 0; i < binaryLen; i++) {\n            var ascii = binaryString.charCodeAt(i);\n            byteArray[i] = ascii;\n          }\n          return byteArray;\n        };\n\n        const applicantData = []\n        if (data.length === 0) {\n          navigate('/complete')\n        }\n\n        setTotal(data.length);\n\n        for (let applicant of data) {\n          var arrayBuffer = base64ToArrayBuffer(applicant.resume.slice(28));\n          const blob = new Blob([arrayBuffer], { type: 'application/pdf' });\n          const resumeURL = URL.createObjectURL(blob);\n\n          applicantData.push({\n            timestamp: applicant.time_created,\n            firstName: applicant.first_name,\n            lastName: applicant.last_name,\n            resume: resumeURL,\n            roles: applicant.desired_roles,\n            answer1: applicant.answer1,\n            answer2: applicant.answer2,\n            answer3: applicant.answer3,\n            commitments: applicant.commitments,\n            year: applicant.year,\n            major: applicant.major,\n            gender: applicant.gender,\n            race: applicant.race,\n            linkedin: applicant.linkedin,\n            website: applicant.website,\n          })\n        }\n        setData(applicantData);\n      })\n      .catch((err) => {\n        console.log(err.message);\n      });\n  }\n\n  //Mounting Calls\n  useEffect(() => {\n\n    //Authentication Check\n    async function checkUser(value) {\n      await fetch(`${process.env.REACT_APP_API_URL}/check_grader`, {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          email: value.email,\n        })\n      })\n        .then((response) => {\n          return (response.json());\n        })\n        .then((data) => {\n          if (data.found === false) {\n            navigate('/member-login');\n          }\n        });\n    };\n\n    if (state === null) {\n      navigate('/member-login');\n    } else {\n      checkUser(state);\n    }\n\n    fetchData();\n    setLoading('');\n  }, []);\n\n  return (\n    <ThemeProvider theme={theme}>\n      <div className='form-field'>\n        <Formik\n          initialValues={{\n            timestamp: userInfo[0].timestamp,\n            firstName: userInfo[0].firstName,\n            lastName: userInfo[0].lastName,\n            resume: userInfo[0].resumeURL,\n            roles: userInfo[0].roles,\n            answer1: userInfo[0].answer1,\n            answer2: userInfo[0].answer2,\n            answer3: userInfo[0].answer3,\n            commitments: userInfo[0].commitments,\n            major: userInfo[0].major,\n            year: userInfo[0].year,\n            gender: userInfo[0].gender,\n          }}\n          onSubmit={async () => {\n            setLoading('Submitting your review; please wait...');\n            await fetch(`${process.env.REACT_APP_API_URL}/add_review`, {\n              method: \"POST\",\n              headers: { \"Content-Type\": \"application/json\" },\n              body: JSON.stringify({\n\n                grader: state.email,\n                comment0: comment0,\n                resCommit: resCommit,\n                resLead: resLead,\n                resTech: resTech,\n                comment1: comment1,\n                initiative: initiative,\n                problem: problem,\n                comemnt2: comment2,\n                ansCommit: ansCommit,\n                impact: impact,\n                comment3: comment3,\n                passion: passion,\n                excellence: excellence,\n                comment4: comment4,\n                commitment: commitment,\n                applicantID: userInfo[0].timestamp,\n              }),\n            })\n              .then(() => {\n                let newData = userInfo;\n                newData.shift();\n                if (newData.length === 0) {\n                  navigate('/complete')\n                }\n                setData(newData);\n                window.scrollTo(0, 0);\n\n                setResCommit('1');\n                setResLead('1');\n                setResTech('1');\n                setInitiative('1');\n                setProblem('1');\n                setAnsCommit('1');\n                setImpact('1');\n                setPassion('1');\n                setExcellence('1');\n                setcommitment('1');\n                setComment0('');\n                setComment1('');\n                setComment2('');\n                setComment3('');\n                setComment4('');\n              });\n            setCompleted(completed + 1);\n          }}\n        >\n          {(formik) => (\n            <div>\n              <span>\n                <Button\n                  style={{ display: \"flex\" }}\n                  variant=\"contained\"\n                  color=\"neutral\"\n                  onClick={navToHome}\n                  className=\"navHome\"\n                >Return Home</Button>\n\n                <h1 style={{ display: \"flex\" }}>\n                  PlexTech Grader Portal\n                </h1>\n              </span>\n\n              <div>\n                <p>Reviews Completed: {completed} / {total}</p>\n                <LinearProgress variant=\"determinate\" value={Math.floor(completed / total * 100)} />\n                <h4>\n                  For each applicant, please provide the corresponding ratings and leave concise\n                  comments for every response.\n                </h4>\n\n                <form onSubmit={formik.handleSubmit}>\n\n                  <label htmlFor=\"timestamp\">Applicant ID</label>\n                  <div className=\"horizontal-box\">\n                    <p>{typeof userInfo[0].timestamp != typeof undefined ? userInfo[0].timestamp : 'N/A'}</p>\n                  </div>\n\n                  <label htmlFor=\"firstName\">First Name</label>\n                  <div className=\"horizontal-box\">\n                    <p>{userInfo[0].firstName}</p>\n                  </div>\n\n                  <label htmlFor=\"lastName\">Last Name</label>\n                  <div className=\"horizontal-box\">\n                    <p>{userInfo[0].lastName}</p>\n                  </div>\n\n                  <label htmlFor=\"graduationYear\">Graduation Year</label>\n                  <div className=\"horizontal-box\">\n                    <p>{userInfo[0].year}</p>\n                  </div>\n\n                  <label htmlFor=\"major\">Major</label>\n                  <div className=\"horizontal-box\">\n                    <p>{userInfo[0].major}</p>\n                  </div>\n\n                  {/* Not shown because we eliminated DE&I factors in application reviews */}\n                  {/* <label htmlFor=\"gender\">Gender</label>\n                  <div className=\"horizontal-box\">\n                    <p>{userInfo[0].gender}</p>\n                  </div>\n\n                  <label htmlFor=\"race\">Demographics</label>\n                  <div className=\"horizontal-box\">\n                    <p>{typeof userInfo[0].race != typeof undefined ? userInfo[0].race : 'N/A'}</p>\n                  </div> */}\n\n                  <label htmlFor=\"website\">Personal Website</label>\n                  <div className=\"horizontal-box\">\n                    <p>{typeof userInfo[0].website != typeof undefined ? userInfo[0].website : 'None'}</p>\n                  </div>\n\n                  <label htmlFor=\"linkedin\">LinkedIn</label>\n                  <div className=\"horizontal-box\">\n                    <p>{typeof userInfo[0].linkedin != typeof undefined ? userInfo[0].linkedin : 'None'}</p>\n                  </div>\n\n                  <label htmlFor=\"roles\">Desired roles</label>\n                  <div className=\"horizontal-box\">\n                    <p>{typeof userInfo[0].roles != typeof undefined ? userInfo[0].roles : \"Not Specified\"}</p>\n                  </div>\n\n                  {\n                    essaySubmitted\n                      ? <></>\n                      : <>\n                        {/* Essay Question 1 */}\n                        <div className=\"horizontal-box\">\n                          <h4 style={{ color: '#ec6f34' }}>Question 1</h4>\n                          <label htmlFor=\"answer1\">\n                            Why do you want to join PlexTech?\n                          </label>\n                          <p>{userInfo[0].answer1}</p>\n\n                          <label htmlFor=\"comment1\">Comment</label>\n\n                          <textarea\n                            className=\"commentHeight\"\n                            id=\"comment1\"\n                            type=\"text\"\n                            wrap=\"soft\"\n                            value={comment1}\n                            onChange={(event) => { setComment1(event.target.value) }}\n                          />\n\n                          <label htmlFor=\"res\">\n                            How well does the applicant demonstrate their ability to take on initiatives?\n                          </label>\n                          <select className=\"dropbtn\" name=\"initiative\" value={initiative} onChange={(event) => { setInitiative(event.target.value) }}>\n                            <option value=\"\" disabled={true}>Choose a rating:</option>\n                            <option value={1}>1 (No trace at all)</option>\n                            <option value={2}>2</option>\n                            <option value={3}>3</option>\n                            <option value={4}>4</option>\n                            <option value={5}>5 (Clear signs of unique initiatives taken)</option>\n                          </select>\n\n                          <label htmlFor=\"res\">\n                            How well does the applicant demonstrate their problem-solving abilities?\n                          </label>\n                          <select className=\"dropbtn\" name=\"problem\" value={problem} onChange={(event) => { setProblem(event.target.value) }}>\n                            <option value=\"\" disabled={true}>Choose a rating:</option>\n                            <option value={1}>1 (No trace at all)</option>\n                            <option value={2}>2</option>\n                            <option value={3}>3</option>\n                            <option value={4}>4</option>\n                            <option value={5}>5 (Clear, impressive description of problem-solving processes)</option>\n                          </select>\n                        </div>\n\n                        <br />\n\n                        {/* Essay Question 2 */}\n                        <div className=\"horizontal-box\">\n                          <h4 style={{ color: '#ec6f34' }}>Question 2</h4>\n                          <label htmlFor=\"essay2\">\n                            Tell us about a community that's especially important to you.\n                          </label>\n                          <p>{userInfo[0].answer2}</p>\n\n                          <label htmlFor=\"comment2\">Comment</label>\n                          <textarea\n                            className=\"commentHeight\"\n                            id=\"comment2\"\n                            type=\"text\"\n                            wrap=\"soft\"\n                            value={comment2}\n                            onChange={(event) => { setComment2(event.target.value) }}\n                          />\n\n                          <label htmlFor=\"answer2Rating\">\n                            How well does the applicant demonstrate their ability to commit to a community?\n                          </label>\n                          <select className=\"dropbtn\" name=\"commitment\" value={ansCommit} onChange={(event) => { setAnsCommit(event.target.value) }}>\n                            <option value=\"\" disabled={true}>Choose a rating:</option>\n                            <option value={1}>1 (Not at all)</option>\n                            <option value={2}>2</option>\n                            <option value={3}>3</option>\n                            <option value={4}>4</option>\n                            <option value={5}>5 (Exhibiting strong willingness to commit to a community)</option>\n                          </select>\n\n                          <label htmlFor=\"answer2Rating\">\n                            To what extent has the applicant impacted their community?\n                          </label>\n                          <select className=\"dropbtn\" name=\"impact\" value={impact} onChange={(event) => { setImpact(event.target.value) }}>\n                            <option value=\"\" disabled={true}>Choose a rating:</option>\n                            <option value={1}>1 (No sign at all)</option>\n                            <option value={2}>2</option>\n                            <option value={3}>3</option>\n                            <option value={4}>4</option>\n                            <option value={5}>5 (Significant impacts to the community)</option>\n                          </select>\n                        </div>\n\n                        <br />\n\n                        {/* Essay Question 3 */}\n                        <div className=\"horizontal-box\">\n                          <h4 style={{ color: '#ec6f34' }}>Question 3</h4>\n                          <label htmlFor=\"essay3\">\n                            Tell us about a time when you \"hacked a system.\"\n                          </label>\n                          <p>{userInfo[0].answer3}</p>\n\n                          <label htmlFor=\"comment3\">Comment</label>\n                          <textarea\n                            className=\"commentHeight\"\n                            id=\"comment3\"\n                            type=\"text\"\n                            wrap=\"soft\"\n                            value={comment3}\n                            onChange={(event) => { setComment3(event.target.value) }}\n                          />\n\n                          <label htmlFor=\"answer3Rating\">\n                            How well does the applicant exhibit a sense of passion for learning and solving problems?\n                          </label>\n                          <select className=\"dropbtn\" name=\"passion\" value={passion} onChange={(event) => { setPassion(event.target.value) }}>\n                            <option value=\"\" disabled={true}>Choose a rating:</option>\n                            <option value={1}>1 (No sign at all)</option>\n                            <option value={2}>2</option>\n                            <option value={3}>3</option>\n                            <option value={4}>4</option>\n                            <option value={5}>5 (An avid passion is exhibited)</option>\n                          </select>\n\n                          <label htmlFor=\"answer3Rating\">\n                            To what extent did the applicant go above and beyond in their project?\n                          </label>\n                          <select className=\"dropbtn\" name=\"passion\" value={excellence} onChange={(event) => { setExcellence(event.target.value) }}>\n                            <option value=\"\" disabled={true}>Choose a rating:</option>\n                            <option value={1}>1 (No sign at all)</option>\n                            <option value={2}>2</option>\n                            <option value={3}>3</option>\n                            <option value={4}>4</option>\n                            <option value={5}>5 (Impressive excellence is shown)</option>\n                          </select>\n                        </div>\n\n                        <br />\n\n                        {/* Time Commitments */}\n                        <div className=\"horizontal-box\">\n                          <h4 style={{ color: '#ec6f34' }}>Time Commitments</h4>\n                          <p>{userInfo[0].commitments}</p>\n\n                          <label htmlFor=\"comment4\">Comment</label>\n                          <textarea\n                            className=\"commentHeight\"\n                            id=\"comment4\"\n                            type=\"text\"\n                            wrap=\"soft\"\n                            value={comment4}\n                            onChange={(event) => { setComment4(event.target.value) }}\n                          />\n\n                          <label htmlFor=\"commitment\">\n                            Do the applicant's commitments seem concerning (WAY too many clubs, insane unit count, etc.)?\n                          </label>\n                          <select className=\"dropbtn\" name=\"commitment\" value={commitment} onChange={(event) => { setcommitment(event.target.value) }}>\n                            <option value=\"\" disabled={true}>Choose a rating:</option>\n                            <option value={3}>Not at all</option>\n                            <option value={2}>Could be a problem</option>\n                            <option value={1}>RED FLAG</option>\n                          </select>\n                        </div>\n\n                        <br />\n\n                        <p>\n                          Please confirm your essay reviews before moving onto the next section. You cannot go back and edit your current responses beyond this point.\n                        </p>\n\n                        <div className='horizontal-box'>\n                          <Button\n                            onClick={() => {\n                              setEssaySubmitted(true);\n                            }}\n                            variant=\"contained\"\n                            color=\"neutral\"\n                            fontWeight=\"Bold\"\n                          >\n                            Confirm Essay Reviews\n                          </Button>\n                        </div>\n\n                      </>\n                  }\n                  <br ref={resumeRef} />\n\n                  {\n                    essaySubmitted\n                      ? <>\n                        <h4 style={{ color: '#ec6f34' }}>Resume/CV</h4>\n\n                        {/* Resume */}\n                        <div className=\"horizontal-box\">\n                          <iframe src={userInfo[0].resume} />\n                          <label htmlFor=\"comment0\">Comment</label>\n                          <textarea\n                            className=\"commentHeight\"\n                            id=\"comment0\"\n                            type=\"text\"\n                            wrap=\"soft\"\n                            value={comment0}\n                            onChange={(event) => { setComment0(event.target.value) }}\n                          />\n\n                          <label htmlFor=\"resCom\">\n                            Do experiences in the applicant's resume exhibit consistency and commitment?\n                          </label>\n                          <select className=\"dropbtn\" name=\"resCommit\" value={resCommit} onChange={(event) => { setResCommit(event.target.value) }}>\n                            <option value=\"\" disabled={true}>Choose a rating:</option>\n                            <option value={1}>1 (Not at all)</option>\n                            <option value={2}>2</option>\n                            <option value={3}>3</option>\n                            <option value={4}>4</option>\n                            <option value={5}>5 (A perfect amount)</option>\n                          </select>\n\n                          <label htmlFor=\"res\">\n                            What quality of leadership experiences does the applicant's resume display?\n                          </label>\n                          <select className=\"dropbtn\" name=\"resLead\" value={resLead} onChange={(event) => { setResLead(event.target.value) }}>\n                            <option value=\"\" disabled={true}>Choose a rating:</option>\n                            <option value={1}>1 (No leadership experience)</option>\n                            <option value={2}>2</option>\n                            <option value={3}>3</option>\n                            <option value={4}>4</option>\n                            <option value={5}>5 (Major leadership experiences)</option>\n                          </select>\n\n                          <label htmlFor=\"res\">\n                            What kind of technical experience (don't need to be CS-related: bio, engineering, math, etc.) does the applicant's resume display?\n                          </label>\n                          <select className=\"dropbtn\" name=\"resTech\" value={resTech} onChange={(event) => { setResTech(event.target.value) }}>\n                            <option value=\"\" disabled={true}>Choose a rating:</option>\n                            <option value={1}>1 (No technical experience)</option>\n                            <option value={2}>2</option>\n                            <option value={3}>3</option>\n                            <option value={4}>4</option>\n                            <option value={5}>5 (Significant technical experiences)</option>\n                          </select>\n                        </div>\n                      </>\n                      : <></>\n                  }\n\n                  <br />\n\n                  {/* Submit Button */}\n                  {\n                    essaySubmitted ? <div className='horizontal-box'>\n                      <Button\n                        type=\"submit\"\n                        variant=\"contained\"\n                        color=\"neutral\"\n                        fontWeight=\"Bold\"\n                      >\n                        Submit\n                      </Button>\n                    </div> : <></>\n                  }\n                  <p>{loadingMessage}</p>\n                </form>\n              </div>\n            </div>\n          )\n          }\n        </Formik >\n      </div >\n      <br />\n    </ThemeProvider >\n  );\n};\n\nexport default GraderForm;\n","/Users/bradl/Desktop/Berkeley/Fall_2022/PlexTech/Frontend/src/privacyPolicy.js",[],[],"/Users/bradl/Desktop/Berkeley/Fall_2022/PlexTech/Frontend/src/funnyDog.js",["84"],[],"import React from 'react';\nimport dog from './funny_dog.png';\nimport \"./styles.css\";\n\nfunction FunnyDog() {\n    return (\n        <>\n        <h4>Congratulations, you have found the funny dog.</h4>\n        <img src={dog}></img>\n        <p>The dog is very funny</p>\n        </>\n    )\n}\n\nexport default FunnyDog;",{"ruleId":"85","severity":1,"message":"86","line":5,"column":10,"nodeType":"87","messageId":"88","endLine":5,"endColumn":29},{"ruleId":"89","severity":1,"message":"90","line":64,"column":8,"nodeType":"91","endLine":64,"endColumn":10,"suggestions":"92"},{"ruleId":"89","severity":1,"message":"93","line":98,"column":8,"nodeType":"91","endLine":98,"endColumn":10,"suggestions":"94"},{"ruleId":"89","severity":1,"message":"95","line":102,"column":8,"nodeType":"91","endLine":102,"endColumn":23,"suggestions":"96"},{"ruleId":"85","severity":1,"message":"97","line":8,"column":8,"nodeType":"87","messageId":"88","endLine":8,"endColumn":21},{"ruleId":"85","severity":1,"message":"98","line":9,"column":8,"nodeType":"87","messageId":"88","endLine":9,"endColumn":16},{"ruleId":"85","severity":1,"message":"99","line":10,"column":8,"nodeType":"87","messageId":"88","endLine":10,"endColumn":19},{"ruleId":"85","severity":1,"message":"100","line":11,"column":8,"nodeType":"87","messageId":"88","endLine":11,"endColumn":14},{"ruleId":"85","severity":1,"message":"101","line":37,"column":7,"nodeType":"87","messageId":"88","endLine":37,"endColumn":16},{"ruleId":"89","severity":1,"message":"90","line":64,"column":8,"nodeType":"91","endLine":64,"endColumn":10,"suggestions":"102"},{"ruleId":"89","severity":1,"message":"103","line":39,"column":8,"nodeType":"91","endLine":39,"endColumn":10,"suggestions":"104"},{"ruleId":"85","severity":1,"message":"105","line":3,"column":13,"nodeType":"87","messageId":"88","endLine":3,"endColumn":16},{"ruleId":"89","severity":1,"message":"106","line":176,"column":6,"nodeType":"91","endLine":176,"endColumn":8,"suggestions":"107"},{"ruleId":"108","severity":1,"message":"109","line":523,"column":27,"nodeType":"110","endLine":523,"endColumn":62},{"ruleId":"111","severity":1,"message":"112","line":9,"column":9,"nodeType":"110","endLine":9,"endColumn":24},"no-unused-vars","'GoogleOAuthProvider' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'clientID' and 'handleResponse'. Either include them or remove the dependency array.","ArrayExpression",["113"],"React Hook useEffect has missing dependencies: 'URL', 'fetchGraderData', 'getApplications', 'getEvaluations', 'getIncomplete', 'getResults', 'loadAnalytics', 'navigate', and 'state'. Either include them or remove the dependency array.",["114"],"React Hook useEffect has a missing dependency: 'fetchGraderData'. Either include it or remove the dependency array.",["115"],"'OutlinedInput' is defined but never used.","'MenuItem' is defined but never used.","'FormControl' is defined but never used.","'Select' is defined but never used.","'MenuProps' is assigned a value but never used.",["116"],"React Hook useEffect has missing dependencies: 'navigate' and 'state'. Either include them or remove the dependency array.",["117"],"'Yup' is defined but never used.","React Hook useEffect has missing dependencies: 'fetchData', 'navigate', and 'state'. Either include them or remove the dependency array.",["118"],"jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.","JSXOpeningElement","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.",{"desc":"119","fix":"120"},{"desc":"121","fix":"122"},{"desc":"123","fix":"124"},{"desc":"119","fix":"125"},{"desc":"126","fix":"127"},{"desc":"128","fix":"129"},"Update the dependencies array to be: [clientID, handleResponse]",{"range":"130","text":"131"},"Update the dependencies array to be: [URL, fetchGraderData, getApplications, getEvaluations, getIncomplete, getResults, loadAnalytics, navigate, state]",{"range":"132","text":"133"},"Update the dependencies array to be: [fetchGraderData, graderMessage]",{"range":"134","text":"135"},{"range":"136","text":"131"},"Update the dependencies array to be: [navigate, state]",{"range":"137","text":"138"},"Update the dependencies array to be: [fetchData, navigate, state]",{"range":"139","text":"140"},[1895,1897],"[clientID, handleResponse]",[3021,3023],"[URL, fetchGraderData, getApplications, getEvaluations, getIncomplete, getResults, loadAnalytics, navigate, state]",[3083,3098],"[fetchGraderData, graderMessage]",[1899,1901],[927,929],"[navigate, state]",[4783,4785],"[fetchData, navigate, state]"]